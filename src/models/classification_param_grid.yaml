RandomForestClassifier:
  n_estimators: [10, 50, 100, 200]
  max_depth: [10, 20, 30, 40]
  min_samples_split: [2, 5, 10]
  min_samples_leaf: [1, 2, 4]
  bootstrap: [True, False]

KNeighborsClassifier:
  n_neighbors: [3, 5, 7, 9, 11]
  weights: ['uniform', 'distance']
  algorithm: ['auto', 'ball_tree', 'kd_tree', 'brute']
  leaf_size: [20, 30, 40]
  p: [1, 2]

DecisionTreeClassifier:
  max_depth: [5, 10, 20, 30]
  min_samples_split: [2, 5, 10]
  min_samples_leaf: [1, 2, 4]
  criterion: ['gini', 'entropy']
  splitter: ['best', 'random']

SVC:
  C: [0.1, 1, 10, 100, 1000]
  kernel: ['linear', 'poly', 'rbf', 'sigmoid']
  gamma: ['scale', 'auto']
  degree: [3, 4, 5]
  probability: [True, False]

GaussianNB:
  var_smoothing: [1e-9, 1e-8, 1e-7, 1e-6]

MLPClassifier:
  hidden_layer_sizes: [(50,), (100,), (50, 50), (100, 100), (50, 100, 50)]
  activation: ['identity', 'logistic', 'tanh', 'relu']
  solver: ['lbfgs', 'sgd', 'adam']
  alpha: [0.0001, 0.001, 0.01, 0.1]
  learning_rate: ['constant', 'invscaling', 'adaptive']
  max_iter: [200, 300, 400]

XGBClassifier:
  n_estimators: [50, 90, 150, 200]
  learning_rate: [0.1, 0.2, 0.3]
  booster: ['gbtree', 'gblinear', 'dart']
  gamma: [0, 0.1, 0.2]
  min_child_weight: [1, 3, 5]
  colsample_bytree: [0.6, 0.8, 1.0]
